[{"C:\\Users\\Tatja\\Documents\\HTML_CSS_JavaScript\\MERN\\MERN_Todo_App\\client\\src\\index.js":"1","C:\\Users\\Tatja\\Documents\\HTML_CSS_JavaScript\\MERN\\MERN_Todo_App\\client\\src\\App.js":"2","C:\\Users\\Tatja\\Documents\\HTML_CSS_JavaScript\\MERN\\MERN_Todo_App\\client\\src\\components\\create-todo.component.js":"3","C:\\Users\\Tatja\\Documents\\HTML_CSS_JavaScript\\MERN\\MERN_Todo_App\\client\\src\\components\\todo-list.component.js":"4","C:\\Users\\Tatja\\Documents\\HTML_CSS_JavaScript\\MERN\\MERN_Todo_App\\client\\src\\components\\edit-todo.component.js":"5","C:\\Users\\Tatja\\Documents\\HTML_CSS_JavaScript\\MERN\\MERN_Todo_App\\client\\src\\components\\TodoList.js":"6","C:\\Users\\Tatja\\Documents\\HTML_CSS_JavaScript\\MERN\\MERN_Todo_App\\client\\src\\components\\Form.js":"7","C:\\Users\\Tatja\\Documents\\HTML_CSS_JavaScript\\MERN\\MERN_Todo_App\\client\\src\\components\\Todo.js":"8"},{"size":219,"mtime":1629380490217,"results":"9","hashOfConfig":"10"},{"size":1744,"mtime":1629782104170,"results":"11","hashOfConfig":"10"},{"size":6160,"mtime":1589889147088,"results":"12","hashOfConfig":"13"},{"size":3824,"mtime":1602844936509,"results":"14","hashOfConfig":"13"},{"size":6330,"mtime":1589889173744,"results":"15","hashOfConfig":"13"},{"size":5590,"mtime":1631026563595,"results":"16","hashOfConfig":"10"},{"size":1620,"mtime":1630925924624,"results":"17","hashOfConfig":"10"},{"size":222,"mtime":1630926861500,"results":"18","hashOfConfig":"10"},{"filePath":"19","messages":"20","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"21"},"1617lxx",{"filePath":"22","messages":"23","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"24","usedDeprecatedRules":"21"},{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"27"},"1bvlejq",{"filePath":"28","messages":"29","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"30","usedDeprecatedRules":"27"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"27"},{"filePath":"33","messages":"34","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"35"},{"filePath":"36","messages":"37","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"38","messages":"39","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\Tatja\\Documents\\HTML_CSS_JavaScript\\MERN\\MERN_Todo_App\\client\\src\\index.js",[],["40","41"],"C:\\Users\\Tatja\\Documents\\HTML_CSS_JavaScript\\MERN\\MERN_Todo_App\\client\\src\\App.js",["42","43"],"import React from \"react\";\nimport { BrowserRouter as Router, Route, Link, Switch } from \"react-router-dom\";\n\n// import CreateTodo from \"./components/create-todo.component\";\n// import EditTodo from \"./components/edit-todo.component\";\n// import TodosList from \"./components/todo-list.component\";\n\n// import TodosList from \"./components/TodoList\";\n\n// import logo from \"./logo.png\";\nimport Form from \"./components/Form\";\nimport TodoList from \"./components/TodoList\";\n\nimport \"./App.css\";\n\nfunction App() {\n  return (\n    <Router>\n      <>\n        <Switch>\n          <Route path=\"/\">\n            <TodoList />\n          </Route>\n\n          {/* <Route path=\"/\">\n            <TodoList />\n          </Route> */}\n        </Switch>\n      </>\n    </Router>\n    //Router from BrowserRouter\n    // <Router>\n    //   <div className=\"container\">\n    //     <nav className=\"navbar\">\n    //       <a href=\"https://github.com/tsvGithub\" target=\"_blank\" rel=\"noopener noreferrer\">\n    //         {/* <img src={logo} alt=\"Just Do It!\" /> */}\n    //       </a>\n    //       {/*Links==='a'*/}\n    //       <Link to=\"/\" className=\"navbar-brand\">\n    //         Todos\n    //       </Link>\n    //       <ul>\n    //         <li>\n    //           <Link to=\"/\">Todos</Link>\n    //         </li>\n    //         <li>\n    //           <Link to=\"/create\">Create Todo</Link>\n    //         </li>\n    //       </ul>\n    //     </nav>\n\n    //     {/*ROUTES for each Route & it have at least 2 attributes - path and component to connect to*/}\n    //     <Route path=\"/\" exact component={TodosList} />\n    //     <Route path=\"/edit/:id\" component={EditTodo} />\n    //     <Route path=\"/create\" component={CreateTodo} />\n    //   </div>\n    // </Router>\n  );\n}\n\nexport default App;\n","C:\\Users\\Tatja\\Documents\\HTML_CSS_JavaScript\\MERN\\MERN_Todo_App\\client\\src\\components\\create-todo.component.js",[],["44","45"],"C:\\Users\\Tatja\\Documents\\HTML_CSS_JavaScript\\MERN\\MERN_Todo_App\\client\\src\\components\\todo-list.component.js",["46"],"import React, { Component } from \"react\";\r\n//2\r\nimport { Link } from \"react-router-dom\";\r\nimport axios from \"axios\";\r\n\r\n// 7 Todo React functional Component\r\nconst Todo = (props) => (\r\n  //[props.todo] = props from todoList() function with Component\r\n  //<Todo todo={currentTodo}/> => [props.todo]==currentTodo\r\n  //=>props.todo.description === currentTodo[description]\r\n  <tr>\r\n    {/*8 if 'completed'(true/false) => applies css.completed or (if not completed) empty string =>no classes applied  */}\r\n\r\n    {/* <td>{props.todo.description}</td>\r\n    <td>{props.todo.responsible}</td>\r\n    <td>{props.todo.priority}</td> */}\r\n    <td className={props.todo.completed ? \"completed\" : \"\"}>{props.todo.description}</td>\r\n    <td className={props.todo.completed ? \"completed\" : \"\"}>{props.todo.responsible}</td>\r\n    <td className={props.todo.completed ? \"completed\" : \"\"}>{props.todo.priority}</td>\r\n    <td>\r\n      {/* Actions column with Link to route 'edit' with ID from DB*/}\r\n      <Link to={\"/edit/\" + props.todo._id}>Edit</Link>\r\n      {/*---------DELETE----------- */} |\r\n      <a\r\n        href=\"#\"\r\n        onClick={() => {\r\n          // debugger;\r\n          props.deleteTodo(props.todo._id);\r\n        }}\r\n      >\r\n        Delete\r\n      </a>\r\n    </td>\r\n  </tr>\r\n);\r\n\r\n//1 export for App.js Route path\r\nexport default class TodoList extends Component {\r\n  //3 constructor taking props from the Component\r\n  constructor(props) {\r\n    //calling a parent Constructor & passing in props\r\n    super(props);\r\n    //-----------------------\r\n    this.deleteTodo = this.deleteTodo.bind(this);\r\n    //-------------------\r\n    //setting initial State of the Component\r\n    //with property 'todos' with empty Array\r\n    this.state = { todos: [] };\r\n  }\r\n  //---------------------------------------\r\n  //4 to initialize todos state property (from above  this.state = { todos: [] };)\r\n  //with todos from the DB\r\n  componentDidMount() {\r\n    //sends a request to back-end part\r\n    axios\r\n      .get(\"http://localhost:4000/todos/\")\r\n      //& recieves todo items\r\n      .then((response) => {\r\n        //sets the STATE with data\r\n        this.setState({ todos: response.data });\r\n      })\r\n      .catch(function (error) {\r\n        console.log(error);\r\n      });\r\n  }\r\n  //---------------------------------\r\n  //9 updates Todos List instantly without reload page\r\n  // componentDidUpdate() {\r\n  //   axios\r\n  //     .get(\"http://localhost:4000/todos/\")\r\n  //     .then((response) => {\r\n  //       this.setState({ todos: response.data });\r\n  //     })\r\n  //     .catch(function (error) {\r\n  //       console.log(error);\r\n  //     });\r\n  // }\r\n  //--------------------------\r\n  deleteTodo(id) {\r\n    // debugger;\r\n    axios.delete(\"http://localhost:4000/todos/\" + id).then((response) => {\r\n      console.log(response.data);\r\n    });\r\n    this.setState({\r\n      todos: this.state.todos.filter((el) => el._id !== id),\r\n    });\r\n  }\r\n  //-------------------------------\r\n  //6 iterate over Todo items\r\n  todoList() {\r\n    // debugger;\r\n    return this.state.todos.map((currentTodo) => {\r\n      // Todo Component from 7 with props 'todo'\r\n      return <Todo todo={currentTodo} deleteTodo={this.deleteTodo} key={currentTodo._id} />;\r\n    });\r\n  }\r\n  //----------------------------------------\r\n  render() {\r\n    return (\r\n      <div>\r\n        {/*5 JSX component */}\r\n        <h3>Todos List</h3>\r\n        <table className=\"table table-striped\" style={{ marginTop: 20 }}>\r\n          <thead>\r\n            <tr>\r\n              <th>Description</th>\r\n              <th>Responsible</th>\r\n              <th>Priority</th>\r\n              <th>Actions</th>\r\n            </tr>\r\n          </thead>\r\n          {/*output of the todoList (6) todo data row by row */}\r\n          <tbody>{this.todoList()}</tbody>\r\n        </table>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","C:\\Users\\Tatja\\Documents\\HTML_CSS_JavaScript\\MERN\\MERN_Todo_App\\client\\src\\components\\edit-todo.component.js",[],"C:\\Users\\Tatja\\Documents\\HTML_CSS_JavaScript\\MERN\\MERN_Todo_App\\client\\src\\components\\TodoList.js",["47","48"],"import React, { useState, useEffect } from \"react\";\r\nimport axios from \"axios\";\r\nimport Form from \"./Form\";\r\nimport Todo from \"./Todo\";\r\n\r\nimport moon from \"./../assets/images/icon-moon.svg\";\r\nimport sun from \"./../assets/images/icon-sun.svg\";\r\nimport cross from \"./../assets/images/icon-cross.svg\";\r\n\r\n//================================================================\r\n//FILTERS (1)\r\n//(1a)'filters' has keys with filters 'names' (All, Active, Completed),\r\n//and values are functions to filter 'todos' data\r\n//array (all/not completed/completed)\r\nconst filters = {\r\n  All: () => true,\r\n  Active: (todo) => !todo.isCompleted,\r\n  Completed: (todo) => todo.isCompleted,\r\n};\r\n//(1b)collect an array of filters 'names' ([All, Active, Completed])\r\nconst filtersNames = Object.keys(filters);\r\n// console.log(filtersNames);\r\n//==============================================\r\n\r\nconst TodoList = () => {\r\n  //State:\r\n  const [todo, setTodo] = useState({\r\n    todo: \"\",\r\n    isCompleted: false,\r\n  });\r\n  const [todos, setTodos] = useState([]);\r\n  //FILTERS (2) 'All' filter applies for initial state\r\n  const [filter, setFilter] = useState(\"All\");\r\n  //theme:\r\n  const [mood, setMood] = useState(\"dark\");\r\n\r\n  //========================\r\n  //=======================\r\n  const getTodos = async () => {\r\n    const res = await axios.get(\"/todos\");\r\n    // console.log(res);\r\n    setTodos(res.data.todos);\r\n  };\r\n  // const getCompleted = async () => {\r\n  //   const res = await axios.get(\"/todos/completed\");\r\n  //   console.log(res);\r\n  // };\r\n\r\n  //-------------\r\n  useEffect(() => {\r\n    getTodos();\r\n  }, [todo, setTodo]);\r\n  //--------------\r\n  const toggleComplete = async (todo) => {\r\n    console.log(todo);\r\n    let newTodo = { ...todo };\r\n    console.log(newTodo);\r\n    newTodo.isCompleted = !todo.isCompleted;\r\n    console.log(newTodo);\r\n    const res = await axios.put(`/todos/${newTodo._id}`, newTodo);\r\n    console.log(res);\r\n    setTodo(newTodo);\r\n  };\r\n  //---------------\r\n  const handleDelete = async (_id) => {\r\n    console.log(_id);\r\n    const tasks = todos.filter((todo) => todo._id !== _id);\r\n    setTodos(tasks);\r\n    const res = await axios.delete(`/todos/${_id}`);\r\n    console.log(res);\r\n    console.log(todos);\r\n  };\r\n  const getCompleted = async () => {\r\n    const res = await axios.delete(\"/todos\");\r\n    console.log(res);\r\n  };\r\n  const clearCompleted = () => {\r\n    console.log(\"Clear completed!\");\r\n    const activeTodos = todos.filter((todo) => !todo.isCompleted);\r\n    // console.log(activeTodos);\r\n    setTodos(activeTodos);\r\n    getCompleted();\r\n  };\r\n\r\n  //-------------\r\n  //FILTERS (6)\r\n  const itemsLeft = todos.filter(filters[\"Active\"]).length;\r\n  //-----------------\r\n  let todosReversed = [...todos].reverse(); //last item goes first\r\n  const allTodos =\r\n    todosReversed.length > 0 &&\r\n    //FILTERS (4) set filters .filter(filters[filter]) for each item\r\n    todosReversed.filter(filters[filter]).map((todo, id) => {\r\n      // todosReversed.map((todo, id) => {\r\n      return (\r\n        <li className={`input-${mood}`} key={id}>\r\n          <label className=\"task\" data-title=\"Todo completed?\">\r\n            <input\r\n              type=\"checkbox\"\r\n              //state\r\n              name=\"isCompleted\"\r\n              checked={todo.isCompleted}\r\n              onChange={() => toggleComplete(todo)}\r\n              //too many rerenders:\r\n              // onChange={handleComplete(id)}\r\n            />\r\n            <span className=\"checkmark\"></span>\r\n          </label>\r\n          <Todo todo={todo} mood={mood} />\r\n          <button data-title=\"Delete todo?\" className=\"cross\" onClick={() => handleDelete(todo._id)}>\r\n            {/* <button onClick={() => handleDelete(id)}> */}\r\n            <img src={cross} />\r\n          </button>\r\n        </li>\r\n      );\r\n    });\r\n  //----------------\r\n  //FILTER (3)\r\n  const filterList = filtersNames.map((name) => (\r\n    //filters\r\n    <button\r\n      className={filter === name ? \"current filter-btn\" : \"filter-btn\"}\r\n      onClick={() => setFilter(name)}\r\n      aria-pressed={name === filter}\r\n    >\r\n      {/* <button className=\"filter-btn \" onClick={() => setFilter(name)} aria-pressed={name === filter}> */}\r\n      {name}\r\n    </button>\r\n  ));\r\n  // const clearCompleted = () => {\r\n  //   // console.log(\"Clear completed!\");\r\n  //   // const activeTodos = todos.filter((todo) => !todo.isCompleted);\r\n  //   // // console.log(activeTodos);\r\n  //   // setTodos(activeTodos);\r\n  //   //====================\r\n  //   getCompleted();\r\n  // };\r\n  //---------------\r\n  const switchMood = () => {\r\n    setMood(mood === \"dark\" ? \"light\" : \"dark\");\r\n    // console.log(mood);\r\n  };\r\n  //====================\r\n  return (\r\n    <main className={`wrapper wrapper-${mood}`}>\r\n      <div className=\"container\">\r\n        <nav>\r\n          <h1>TODO</h1>\r\n          <button className=\"switcher\" onClick={switchMood}>\r\n            <img src={mood === \"dark\" ? sun : moon} />\r\n          </button>\r\n        </nav>\r\n        {/*NB!send todos+setTodos to Form for 'todos' instant update*/}\r\n        <Form todos={todos} mood={mood} setTodos={setTodos} />\r\n        <ul className={`filter filter-${mood} input-${mood}`}>\r\n          <li>{itemsLeft} items left</li>\r\n          {/*Filters (5) */}\r\n          <li className=\"filter-list\">{filterList}</li>\r\n          <li>\r\n            <button className=\"filter-btn\" onClick={clearCompleted}>\r\n              Clear completed\r\n            </button>\r\n          </li>\r\n        </ul>\r\n\r\n        <section className=\"list\">{allTodos}</section>\r\n      </div>\r\n    </main>\r\n  );\r\n};\r\n\r\nexport default TodoList;\r\n","C:\\Users\\Tatja\\Documents\\HTML_CSS_JavaScript\\MERN\\MERN_Todo_App\\client\\src\\components\\Form.js",[],"C:\\Users\\Tatja\\Documents\\HTML_CSS_JavaScript\\MERN\\MERN_Todo_App\\client\\src\\components\\Todo.js",[],{"ruleId":"49","replacedBy":"50"},{"ruleId":"51","replacedBy":"52"},{"ruleId":"53","severity":1,"message":"54","line":2,"column":42,"nodeType":"55","messageId":"56","endLine":2,"endColumn":46},{"ruleId":"53","severity":1,"message":"57","line":11,"column":8,"nodeType":"55","messageId":"56","endLine":11,"endColumn":12},{"ruleId":"49","replacedBy":"58"},{"ruleId":"51","replacedBy":"59"},{"ruleId":"60","severity":1,"message":"61","line":24,"column":7,"nodeType":"62","endLine":30,"endColumn":8},{"ruleId":"63","severity":1,"message":"64","line":112,"column":13,"nodeType":"62","endLine":112,"endColumn":32},{"ruleId":"63","severity":1,"message":"64","line":150,"column":13,"nodeType":"62","endLine":150,"endColumn":55},"no-native-reassign",["65"],"no-negated-in-lhs",["66"],"no-unused-vars","'Link' is defined but never used.","Identifier","unusedVar","'Form' is defined but never used.",["65"],["66"],"jsx-a11y/anchor-is-valid","The href attribute requires a valid value to be accessible. Provide a valid, navigable address as the href value. If you cannot provide a valid href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","no-global-assign","no-unsafe-negation"]